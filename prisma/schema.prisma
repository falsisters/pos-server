// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(cuid())
  email       String           @unique
  name        String
  password    String
  permissions UserPermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  Cashier     Cashier[]
  Product     Product[]
}

model UserPermission {
  id        String             @id @default(cuid())
  name      UserPermissionType
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  user      User               @relation(fields: [userId], references: [id])
}

enum UserPermissionType {
  READ
  WRITE
  DELETE
}

model Cashier {
  id            String              @id @default(cuid())
  name          String              @unique
  accessKey     String
  secureCode    String              @default(cuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions   CashierPermission[]
  shifts        Shift[]
  deliveries    Delivery[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  Sale          Sale[]
  CashBreakdown CashBreakdown[]
  Kahon         Kahon[]
  Expense       Expense[]
}

model CashierPermission {
  id        String                @id @default(cuid())
  name      CashierPermissionType
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  cashierId String
  cashier   Cashier               @relation(fields: [cashierId], references: [id], onDelete: Cascade)
}

enum CashierPermissionType {
  PRICES
  DELIVERIES
  STOCKS
  PROFITS
  KAHON
  SALES_CHECK
  SALES_HISTORY
}

model Shift {
  id        String   @id @default(cuid())
  cashierId String
  employee  String
  cashier   Cashier  @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  clockIn   DateTime
  clockOut  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(cuid())
  name         String
  minimumQty   Int            @default(1)
  SaleItem     SaleItem[]
  DeliveryItem DeliveryItem[]
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transfer     Transfer[]
  Price        Price[]
  KahonStock   KahonStock[]
}

model Price {
  id        String      @id @default(cuid())
  price     Float
  stock     Int
  type      ProductType
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Profit    Profit[]
}

enum ProductType {
  FIFTY_KG
  TWENTY_FIVE_KG
  FIVE_KG
  PER_KILO
  GANTANG
  SPECIAL_PRICE
}

model Profit {
  id        String   @id @default(cuid())
  profit    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Price    @relation(fields: [priceId], references: [id], onDelete: Cascade)
  priceId   String
}

model Sale {
  id            String        @id @default(cuid())
  cashierId     String
  cashier       Cashier       @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  total         Float
  paymentMethod PaymentMethod
  items         SaleItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
}

model SaleItem {
  id        String      @id @default(cuid())
  saleId    String
  sale      Sale        @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  qty       Int
  price     Float
  type      ProductType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Delivery {
  id           String         @id @default(cuid())
  cashierId    String
  cashier      Cashier        @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  total        Float
  items        DeliveryItem[]
  driver       String         @default("None")
  timeFinished DateTime       @default(now())
  isFinished   Boolean        @default(false)
  attachments  String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model DeliveryItem {
  id         String      @id @default(cuid())
  deliveryId String
  delivery   Delivery    @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  qty        Int
  price      Float
  type       ProductType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Transfer {
  id          String       @id @default(cuid())
  productId   String
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  attachments String[]
  qty         Int
  type        TransferType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum TransferType {
  OWN_CONSUMPTION
  RETURN_TO_WAREHOUSE
  REPACK
}

model Kahon {
  id                 String               @id @default(cuid())
  cashierId          String
  cashier            Cashier              @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  total              Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  KahonTotalModifier KahonTotalModifier[]
}

model KahonStock {
  id                 String               @id @default(cuid())
  qty                Int
  productId          String
  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  KahonStockModifier KahonStockModifier[]
}

model KahonStockModifier {
  id           String        @id @default(cuid())
  index        Int
  operation    OperationType
  kahonStockId String
  kahon        KahonStock    @relation(fields: [kahonStockId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model KahonTotalModifier {
  id        String        @id @default(cuid())
  index     Int
  operation OperationType
  kahonId   String
  kahon     Kahon         @relation(fields: [kahonId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum OperationType {
  ADDITION
  SUBTRACTION
  MULTIPLICATION
  DIVISION
  TOTAL
}

model Expense {
  id          String   @id @default(cuid())
  cashierId   String
  cashier     Cashier  @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  description String
  price       Float
  attachments String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CashBreakdown {
  id             String              @id @default(cuid())
  initialBalance Float
  cashierId      String
  cashier        Cashier             @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  total          Float
  items          CashBreakdownItem[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model CashBreakdownItem {
  id              String        @id @default(cuid())
  cashBreakdownId String
  cashBreakdown   CashBreakdown @relation(fields: [cashBreakdownId], references: [id], onDelete: Cascade)
  bill            String
  qty             Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum Bill {
  thousand
  fiveHundred
  twoHundred
  oneHundred
  fifty
  twenty
  coins
}
